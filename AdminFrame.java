// AdminFrame.java
// 2430 OOPs I Program 3
package logins;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class AdminFrame extends JFrame
{
    DefaultListModel<String> listModel = new DefaultListModel();
    DefaultListModel<String> listModel2 = new DefaultListModel();
    private JButton AddCourse_btn;
    private JTextField CId_txt;
    private JTextField CTitle_txt;
    private JButton ChangeName_btn;
    private JButton ListPeople_btn;
    private JButton LogOut1_btn;
    private JButton Update_btn;
    private JButton delete_btn;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JList<String> jList2;
    private JList<String> jList1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane1;

    public AdminFrame()
    {
        this.initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     This method is called from within the constructor to initialize the form.
     WARNING: Do NOT modify this code. The content of this method is always
     regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code"> 
    private void initComponents()
    {
        LogOut1_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        AddCourse_btn = new javax.swing.JButton();
        Update_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        ListPeople_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CId_txt = new javax.swing.JTextField();
        CTitle_txt = new javax.swing.JTextField();
        ChangeName_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Administrator Page");  
      
        LogOut1_btn.setText("Log Out");
        // Action listener for logging out. Calls function which logs user out of frame
        this.LogOut1_btn.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent evt)
            {
                AdminFrame.this.LogOut1_btnActionPerformed(evt);
            }
        });
        
        jScrollPane1.setViewportView(jList1);

        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList2);

        AddCourse_btn.setText("Add Course");
        // Action listener for add course button. Calls function which adds new course
        this.AddCourse_btn.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent evt)
            {
                AdminFrame.this.AddCourse_btnActionPerformed(evt);
            }
        });
         
        Update_btn.setText("Refresh Courses");
        // Action listener for refresh courses button. Calls function which displays all courses
        this.Update_btn.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent evt)
            {
                AdminFrame.this.Update_btnActionPerformed(evt);
            }
        });
        
        delete_btn.setText("Delete Course");
        // Action listener for delete course button. Calls function which deletes selected course
        this.delete_btn.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent evt)
            {
                AdminFrame.this.delete_btnActionPerformed(evt);
            }
        });
        
        ListPeople_btn.setText("List Course Members");
        // Action listener for Listing course button .Call function to list members
        this.ListPeople_btn.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent evt)
            {
                AdminFrame.this.ListPeople_btnActionPerformed(evt);
            }
        });
        
        jLabel1.setText("Enter Course ID:");

        jLabel2.setText("Enter Course Title:");

        ChangeName_btn.setText("Edit Course");
        ChangeName_btn.setToolTipText("");
        // Action lister for Edit Course button. Calls function to edit name
        this.ChangeName_btn.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent evt)
            {
                AdminFrame.this.ChangeName_btnActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(LogOut1_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Update_btn)
                                    .addComponent(ChangeName_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(CTitle_txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                    .addComponent(CId_txt, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(AddCourse_btn)))
                        .addGap(29, 29, 29)
                        .addComponent(ListPeople_btn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LogOut1_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CId_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CTitle_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddCourse_btn)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(Update_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChangeName_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delete_btn)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(ListPeople_btn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>  
    // Sets frame to disappear. Hence, logging out user from frame
    private void LogOut1_btnActionPerformed(ActionEvent evt)
    {
        this.setVisible(false);
    }
    // Calls function if course ID and course Title is not empty
    private void AddCourse_btnActionPerformed(ActionEvent evt)
    {
        String newCTitle = this.CTitle_txt.getText();
        String newCId = this.CId_txt.getText();
        if (newCTitle.equals("") || newCId.equals(""))
        {
            ErrorFrame ep = new ErrorFrame();
            ep.setVisible(true);
        } else {
            this.update();
        } 
    }
    // Add course to course list based on user input. Then sets success frame visible if successful.
    private void update()
    {
        String newCTitle = this.CTitle_txt.getText();
        String newCId = this.CId_txt.getText();
        Course temp = new Course(newCId, newCTitle);
        boolean b = LoginFrame.courses.addCourse(temp);
        if (!b)
        {
            ErrorFrame ep = new ErrorFrame();
            ep.setVisible(true);
        }
        else
        {
            this.CId_txt.setText(null);
            this.CTitle_txt.setText(null);
            SuccessFrame sp = new SuccessFrame();
            sp.setVisible(true);
        }

    }
    // Updates and displays a new list of all courses within the courses list. 
    private void Update_btnActionPerformed(ActionEvent evt)
    {
        this.listModel.clear();
        for (int i = 0; i < LoginFrame.courses.getNumItems(); ++i)
        {
            this.listModel.addElement(LoginFrame.courses.getCourse(i).getCId());
        }
        this.jList1.setModel(this.listModel);
    }
    // Deletes selected course from the course list. 
    private void delete_btnActionPerformed(ActionEvent evt)
    {
        String CIdToDelete = this.jList1.getSelectedValue();
        Course ToDelete = LoginFrame.courses.findCourse(CIdToDelete);
        LoginFrame.courses.remove(ToDelete);
    }
    // Lists members of selected class. Displays ID if a student, else, displays professor for professor of class
    private void ListPeople_btnActionPerformed(ActionEvent evt)
    {
        this.listModel2.clear();
        String CIdToList = this.jList1.getSelectedValue();
        Course ToList = LoginFrame.courses.findCourse(CIdToList);
        if (ToList.hasTeacher())
        {
            this.listModel2.addElement("Professor: " + ToList.getTeacher());
        }
        for (int i = 0; i < ToList.taking.getNumItems(); ++i)
        {
            this.listModel2.addElement(
                    ToList.getStudents(i) + "    id: " + ToList.getStudentId(i));
        }
        this.jList2.setModel(this.listModel2);
    }
    // If Course ID and Course Title have inputs, then selected course's info is changed to reflect what is in the text fields. 
    private void ChangeName_btnActionPerformed(ActionEvent evt)
    {
        String ChangedCId = this.CId_txt.getText();
        String ChangedCTitle = this.CTitle_txt.getText();
        if (ChangedCTitle.equals("") || ChangedCId.equals(""))
        {
            ErrorFrame ep = new ErrorFrame();
            ep.setVisible(true);
        } else {
            String OldCId = this.jList1.getSelectedValue();
            LoginFrame.courses.findCourse(OldCId).changeCId(ChangedCId);
            SuccessFrame sp = new SuccessFrame();
            sp.setVisible(true);
        }
    }
    // Main function containing run method for AdminFrame
    public static void main(String[] args)
    {
        try
        {
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            for (UIManager.LookAndFeelInfo info : UIManager.
                    getInstalledLookAndFeels())
            {
                if (!"Nimbus".equals(info.getName()))
                {
                    continue;
                }
                UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
        catch (ClassNotFoundException | InstantiationException
                | IllegalAccessException | UnsupportedLookAndFeelException ex)
        {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null,
                    ex);
        }
        //</editor-fold>
        EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new AdminFrame().setVisible(true);
            }
        });
    }

}
